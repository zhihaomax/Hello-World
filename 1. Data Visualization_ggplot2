install.packages("tidyverse")
library(tidyverse)

?mpg
mpg<-data.frame(mpg)

##
a <- c("kish", "ssjsd", "sdsdsd")

## Basic Graph (Note that "+" must be placed at the end)
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))

## Add attribute of colour, shape and size (can be fixed or depend on variables)
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = fl), shape=1, color="blue", stroke=0.5)

## Draw Separate graph for different class (facet)
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 4)

# facet your plot on the combination of two variables, add facet_grid() to your plot call.
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)

# display facet in rows
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(. ~ cyl)

# display facet in columns
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)

## Change geoms of graph
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
# or
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = TRUE
  )

## Display multiple geoms in same graph
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
# or (color asethetic only applies to scatterplot layer)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth()
# plots line which only includes subcompact car
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)

## Bar Chart (with "stats" argument, use ?stat_bin to see all options in ggplot)
diamonds<-data.frame(diamonds)
# By defalut, y-axis displays count number
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, group = 1))
# Change "stats" argument to proportional
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))

ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )
# Note below difference (color only change the border of bar, while fill change the filled color)
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut))

## Position option
# Make stack bar plots (Default position="stack")
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity))
# Change the position argument to easily understand proportion of different clarity)
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
# Compare Individual values
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
# If points in scatterplots are severely overlapped, use position = "jitter" 
# which adds random noise to graph and separate the points out
ggplot(data = mpg) + 
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")

## Flip Coordinate System
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot() +
  coord_flip()

## Fixed Aspect Ratio (Ratio of y-axis to x-axis)
## And add a abline and horizontal refrence line
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
  geom_point() + 
  geom_abline(intercept = 0, slope=1.5) +
  geom_hline(yintercept=20)+
  coord_fixed()
